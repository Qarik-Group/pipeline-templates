---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Helm Chart & Docker Image pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  Dr Nic Williams <drnicwilliams@gmail.com>
# created: 2018-11-09

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full URL of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  helm:
    chart_path: .

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  image:
    name: starkandwayne/concourse-kubernetes
    tag: latest
    registry:
      username: (( param "Please set your Docker registry username for your pipeline image" ))
      password: (( param "Please set your Docker registry password for your pipeline image" ))

  aws:
    bucket:     (( concat meta.name "-pipeline" ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID" ))
    secret_key: (( param "Please set your AWS Secret Key ID" ))
    charts_uri: (( param "Please set your s3://bucket-name/charts URI" ))

  github:
    uri:            (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:          (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:           (( param "Please specify the name of the Github repository" ))
    branch:         master
    release_branch: (( grab meta.github.branch ))
    private_key:    (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token:   (( param "Please generate a Personal Access Token and specify it here" ))

  dockerhub:
    username:   (( param "Please specify the username for your Dockerhub account" ))
    password:   (( param "Please specify the password for your Dockerhub account" ))
    repository: (( param "Please specify the name of the image (repo/name) that you are building" ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    success_moji:  ":airplane_departure:"
    fail_moji:     ":airplane_arriving:"
    upset_moji:    ":sadpanda:"
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

groups:
  - name: (( grab meta.name ))
    jobs:
      - latest-image
      - rc
      - shipit
  - name: versioning
    jobs:
      - major
      - minor
      - patch

jobs:
  - name: latest-image
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: git, trigger: true }
          - { get: docker-image-build-task }

      - task: build-docker-image
        image: docker-image-build-task
        privileged: true
        config:
          platform: linux
          inputs:   [ { name: git, path: "." } ]
          outputs:  [ name: image ]
          caches:   [ path: cache ]
          run:      { path: build }

      - put: image-latest
        inputs: [ image ]
        params: { image: image/image.tar }

    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: shipit
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: version,      passed: [ rc ], params: { bump: final } }
          - { get: git,          passed: [ rc ] }
          - { get: image-latest, passed: [ rc ], params: { format: oci } }
          - { get: image }

      - load_var: version
        file: version/number

      - in_parallel:
          - put: image-latest
            inputs: [ image-latest ]
            params:
              image:        image-latest/image.tar
              version:      ((.:version))
              bump_aliases: true
          - task: package-chart
            image: image
            config:
              platform: linux
              inputs:
                - name: version
                - name: git
              outputs:
                - name: gh
                - name: (( grab meta.name ))
                - name: notifications
              run:
                path: ./git/ci/scripts/shipit
                args: []
              params:
                CHART_NAME:            (( grab meta.name ))
                CHART_ROOT:            (( grab meta.helm.chart_path ))
                REPO_ROOT:             git
                VERSION_FROM:          version/number
                RELEASE_ROOT:          gh
                REPO_OUT:              (( grab meta.name ))
                RELEASE_BRANCH:        (( grab meta.github.release_branch ))
                GITHUB_OWNER:          (( grab meta.github.owner ))
                GIT_EMAIL:             (( grab meta.git.email ))
                GIT_NAME:              (( grab meta.git.name ))
                NOTIFICATION_OUT:      notifications
                AWS_ACCESS_KEY_ID:     (( grab meta.aws.access_key ))
                AWS_SECRET_ACCESS_KEY: (( grab meta.aws.secret_key ))
                AWS_DEFAULT_REGION:    (( grab meta.aws.region_name ))
                HELM_S3_BUCKET_URI:    (( grab meta.aws.charts_uri ))

      - put: git
        params:
          rebase: true
          repository: (( grab meta.name ))
      - put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
      - put: version
        params:
          bump: patch
      - put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text_file: notifications/message
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: rc
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: git,          trigger: true, passed: [ latest-image ] }
          - { get: image-latest, trigger: true, passed: [ latest-image ] }
          - { get: version, params: { pre: rc } }
          - { get: image }
      - task: release-notes
        image: image
        config:
          platform: linux
          inputs: [ name: git ]
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      - put: version
        params: { file: version/number }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: minor
    public: true
    serial: true
    plan:
      - { get: version, trigger: false, params: { bump: minor } }
      - { put: version,                 params: { file: version/number } }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: major
    public: true
    serial: true
    plan:
      - { get: version, trigger: false, params: { bump: major } }
      - { put: version,                 params: { file: version/number } }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: patch
    public: true
    serial: true
    plan:
      - { get: version, trigger: false, params: { bump: patch } }
      - { put: version,                 params: { file: version/number } }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

resource_types:
  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: image
    type: registry-image
    icon: docker
    source:
      repository: (( grab meta.image.name ))
      tag:        (( grab meta.image.tag ))
      username:   (( grab meta.image.registry.username ))
      password:   (( grab meta.image.registry.password ))

  - name: git
    type: git
    icon: github
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: docker-image-build-task
    type: registry-image
    icon: docker
    source:
      repository: concourse/oci-build-task

  - name: image-latest
    type: registry-image
    icon: docker
    source:
      .: (( inject meta.dockerhub ))
      tag: latest

  - name: version
    type: semver
    icon: aws
    source:
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    icon: slack
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    icon: github
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
