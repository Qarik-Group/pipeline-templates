#!/bin/bash

#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a software pipeline
#
# original authors: James Hunt <james@niftylogic.com>
#                   Geoff Franks (Stark & Wayne)
# created:          2016-11-18
# maintainer:       Benjamin Gandon (Gstack)

auto_sed() {
    file=$1
    shift
    cmd=$1
    shift

    if [[ "$(uname -s)" == "Darwin" ]]; then
        sed -E -i='' -e "$cmd" ${file}
    else
        sed -r -i -e "$cmd" ${file}
    fi
}

set -eu

: ${REPO_ROOT:?required}
: ${BIN_DIR:?required}
: ${RELEASE_NAME:?required}
: ${GIT_EMAIL:?required}
: ${GIT_NAME:?required}
RELEASE_BRANCH=${RELEASE_BRANCH:-"master"}
: ${REPO_OUT:?required}

if [[ -z ${VERSION_FROM} ]]; then
    echo >&2 "VERSION_FROM environment variable not set, or empty. Did you misconfigure Concourse?"
    exit 2
fi
if [[ ! -f ${VERSION_FROM} ]]; then
    echo >&2 "Version file (${VERSION_FROM}) not found. Did you misconfigure Concourse?"
    exit 2
fi
VERSION=$(cat ${VERSION_FROM})
if [[ -z ${VERSION} ]]; then
    echo >&2 "Version file (${VERSION_FROM}) was empty. Did you misconfigure Concourse?"
    exit 2
fi

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
    echo >&2 "ci/release_notes.md not found. Did you forget to write them?"
    exit 1
fi

###############################################################

ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )

pushd $REPO_ROOT

mkdir artifacts

if [[ ! -d ${BIN_DIR} ]]; then
    echo "${BIN_DIR} does not exist as a directory inside ${REPO_ROOT}"
    exit 1
fi

for bin in $(cd ${BIN_DIR} && ls ${BINARIES}); do
    cp ${BIN_DIR}/${bin} artifacts/${bin}
    auto_sed artifacts/${bin} "s/^VERSION=.*/VERSION=\"v${VERSION}\"/"
    artifacts/${bin} -v | grep ${VERSION}
done
popd

echo "v${VERSION}"                         > ${RELEASE_ROOT}/tag
echo "${RELEASE_NAME} v${VERSION}"         > ${RELEASE_ROOT}/name
mv ${REPO_ROOT}/ci/release_notes.md          ${RELEASE_ROOT}/notes.md
mv ${REPO_ROOT}/artifacts                    ${RELEASE_ROOT}/artifacts

cat > ${RELEASE_ROOT}/notification <<EOF
<!here> New ${RELEASE_NAME} v${VERSION} released!
EOF


# GIT!
if [[ -z $(git config --global user.email) ]]; then
    git config --global user.email "${GIT_EMAIL}"
fi
if [[ -z $(git config --global user.name) ]]; then
    git config --global user.name "${GIT_NAME}"
fi

(
    cd ${REPO_ROOT}
    git stash
    git merge --no-edit "${RELEASE_BRANCH}"
    git stash pop
    git add -A
    git status
    git commit -m "release v${VERSION}"
)

# so that future steps in the pipeline can push our changes
cp -a ${REPO_ROOT} ${REPO_OUT}/git
