---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Go Project pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( concat meta.name " Release" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full URL of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  image:
    name: starkandwayne/concourse
    tag: latest
    registry:
      username: (( param "Please set your Docker registry username for your pipeline image" ))
      password: (( param "Please set your Docker registry password for your pipeline image" ))

  binaries: '*'
  bin_dir: bin

  aws:
    bucket:     (( concat meta.pipeline "-pipeline" ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID" ))
    secret_key: (( param "Please set your AWS Secret Key ID" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

  slack:
    webhook:      (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    channel:      (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:     concourse
    icon:         https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
    fail_moji:    ":airplane_arriving:"
    success_moji: ":airplane_departure:"
    upset_moji:   ":sadpanda:"
    fail_url:     (( concat "<" meta.url "/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}| Concourse Failure! " meta.slack.upset_moji ">" ))
    fail_text:    '(( concat meta.slack.fail_url " " meta.pipeline ": `${BUILD_JOB_NAME}` job failed" ))'

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - test
      - rc
      - shipit
      - bump-patch
  - name: versioning
    jobs:
      - major
      - minor

jobs:
  - name: test
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: git, trigger: true }
          - { get: image }
      - task: test
        image: image
        config:
          platform: linux
          inputs:
            - name: git
          run:
            path: "git/ci/scripts/test"
            args: []
          params:
            REPO_ROOT: git
            BIN_DIR: (( grab meta.bin_dir ))
            BINARIES: (( grab meta.binaries ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: rc
    public: true
    plan:
      - in_parallel:
          - { get: git,     passed: [test], trigger: true }
          - { get: version,                 trigger: true, params: {pre: rc} }
          - { get: image,   passed: [test] }
      - put: version
        params: {file: version/number}
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: bump-patch
    public: true
    plan:
      - { get: version, trigger: true, params: { bump: patch, pre: rc }, passed: [shipit] } # bump rc + patch, so that subesquent version bumps can trigger a new bump-patch
      - { put: version,                params: { file: version/number} }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: minor
    public: true
    plan:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: major
    public: true
    plan:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: shipit
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: version, passed: [rc], params: {bump: final} }
          - { get: git,     passed: [rc] }
          - { get: image,   passed: [rc] }
      - task: release
        image: image
        config:
          platform: linux
          inputs:
            - name: version
            - name: git
          outputs:
            - name: gh
            - name: pushme
          run:
            path: "git/ci/scripts/shipit"
            args: []
          params:
            BIN_DIR: (( grab meta.bin_dir ))
            BINARIES: (( grab meta.binaries ))
            REPO_ROOT: git
            VERSION_FROM: version/number
            RELEASE_NAME: (( grab meta.release ))
            RELEASE_ROOT: gh
            REPO_OUT:     pushme
            BRANCH:       (( grab meta.github.branch ))
      - put: version
        params: { bump: final }
      - put: git
        params:
          rebase: true
          repository: pushme/git
      - put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

resource_types:
  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: image
    type: registry-image
    icon: docker
    source:
      repository: (( grab meta.image.name ))
      tag:        (( grab meta.image.tag ))
      username:   (( grab meta.image.registry.username ))
      password:   (( grab meta.image.registry.password ))

  - name: git
    type: git
    icon: github
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: version
    type: semver
    icon: aws
    source:
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    icon: slack
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    icon: github
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
